package com.xdcs.swing.merchant;

import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.border.MatteBorder;

import com.xdcs.util.CellRenderer;
import com.xdcs.util.SocketUtil;
import com.xdcs.vo.Goods;
import com.xdcs.vo.Order;
import com.xdcs.vo.User;

/**
 * 卖家主页面
 */
public class MerchantMain extends JFrame {

	private JPanel contentPane;
	private JTextField textField;
	private User user;
	private List<Goods> goods;
	private JList list;
	public static List<Order> orders;
	private JTextField findByName;
	private JComboBox<String> combobox;
	private JLabel label;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		new MerchantMain().setVisible(true);
	}

	/**
	 * 创建卖家主页面 初始化控件以及为控件添加事件
	 */
	public MerchantMain() {
		setType(Type.POPUP);
		setTitle("卖家");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 600, 451);
		contentPane = new JPanel();
		setContentPane(contentPane);
		contentPane.setLayout(null);

		label = new JLabel("图片");
		label.setFont(new Font("华文楷体", Font.BOLD, 20));
		label.setBounds(466, 10, 100, 90);

		contentPane.add(label);

		JLabel label_1 = new JLabel("店铺名：");
		label_1.setFont(new Font("华文楷体", Font.BOLD, 20));
		label_1.setBounds(30, 25, 90, 27);
		contentPane.add(label_1);

		textField = new JTextField();
		textField.setEnabled(false);
		textField.setBounds(128, 30, 176, 21);
		contentPane.add(textField);
		textField.setColumns(10);

		list = new JList<>();
		list.setFont(new Font("华文楷体", Font.BOLD, 19));
		list.setBorder(new MatteBorder(1, 1, 1, 1, (Color) Color.GRAY));
		list.setCellRenderer(new CellRenderer());
		// list.setBounds(35, 107, 369, 247);
		contentPane.add(list);
		JScrollPane jsp = new JScrollPane();
		jsp.setBounds(35, 107, 369, 280);
		contentPane.add(jsp);
		jsp.setViewportView(list);

		JLabel label_2 = new JLabel("商品列表");
		label_2.setFont(new Font("华文楷体", Font.BOLD, 20));
		label_2.setBounds(30, 70, 85, 21);
		contentPane.add(label_2);

		// findByName = new JTextField();
		// findByName.setBounds(130, 68, 200, 30);
		// contentPane.add(findByName);

		combobox = new JComboBox<>();
		combobox.setBounds(130, 68, 200, 30);
		contentPane.add(combobox);

		JButton find = new JButton("查找");
		find.setFont(new Font("华文楷体", Font.BOLD, 20));
		find.setBounds(340, 68, 80, 30);
		find.setContentAreaFilled(false);
		contentPane.add(find);
		// TODO 这里要添加事件
		// 为查找按钮添加查询事件
		find.addActionListener(new ActionListener() {
			/**
			 * 按商品信息查找商品
			 */
			public void actionPerformed(ActionEvent e) {
				String str = (String) combobox.getSelectedItem();
				if (combobox.getSelectedIndex() == 0) {
					list.setListData(goods.toArray());
					return;
				}
				List<Goods> gs = new ArrayList<>();
				for (int i = 0; i < goods.size(); i++) {
					if (goods.get(i).getGoodBrand().contains(str)) {
						gs.add(goods.get(i));
					}
				}
				list.setListData(gs.toArray());
			}
		});

		JButton btnNewButton = new JButton("商品详情");
		btnNewButton.setBackground(Color.WHITE);
		btnNewButton.setContentAreaFilled(false);
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Goods g = (Goods) list.getSelectedValue();
				if (g == null) {
					JOptionPane.showMessageDialog(null, "请选择要查看商品的详情！！");
					return;
				}
				new GoodMsg(g, list, goods).setVisible(true);
			}
		});
		btnNewButton.setBounds(450, 130, 120, 30);
		btnNewButton.setFont(new Font("华文楷体", Font.BOLD, 20));
		contentPane.add(btnNewButton);

		JButton btnNewButton_1 = new JButton("添加商品");
		btnNewButton_1.setContentAreaFilled(false);

		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				new AddGoodFrm(user, goods, list).setVisible(true);
			}
		});
		btnNewButton_1.setBounds(450, 200, 120, 30);
		btnNewButton_1.setFont(new Font("华文楷体", Font.BOLD, 20));
		contentPane.add(btnNewButton_1);

		JButton btnNewButton_4 = new JButton("查看订单");
		btnNewButton_4.setContentAreaFilled(false);
		btnNewButton_4.addActionListener(new ActionListener() {
			/**
			 * 查看商品订单的
			 */
			public void actionPerformed(ActionEvent e) {
				ObjectOutputStream oos = SocketUtil.getObjectOutputStream();
				ObjectInputStream ois = SocketUtil.getObjectInputStream();
				if (SocketUtil.socketEmpty()) {
					JOptionPane.showMessageDialog(null, "你是怎么进来的？？？是不是没登录");
					return;
				}
				List<Object> ll = new ArrayList<>();
				ll.add("findAllOrderByID");
				ll.add(user);
				try {
					oos.writeObject(ll);
					oos.flush();
					orders = (List<Order>) ois.readObject();
				} catch (IOException e1) {
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					e1.printStackTrace();
				}
				new MerchantOrderFrm(user, orders, goods).setVisible(true);
			}
		});
		btnNewButton_4.setBounds(450, 270, 120, 30);
		btnNewButton_4.setFont(new Font("华文楷体", Font.BOLD, 20));
		contentPane.add(btnNewButton_4);

		JButton btnNewButton_5 = new JButton("删除商品");
		btnNewButton_5.setContentAreaFilled(false);
		btnNewButton_5.addActionListener(new ActionListener() {
			/**
			 * 删除商品的事件
			 */
			public void actionPerformed(ActionEvent e) {
				Goods g = (Goods) list.getSelectedValue();
				if (g == null) {
					JOptionPane.showMessageDialog(null, "删除失败，请选择删除的商品");
					return;
				}
				ObjectOutputStream oos = SocketUtil.getObjectOutputStream();
				ObjectInputStream ois = SocketUtil.getObjectInputStream();

				List<Object> ll = new ArrayList<>();
				ll.add("deleteGoods");
				ll.add(g);
				goods.remove(g);
				list.setListData(goods.toArray());
				try {
					oos.writeObject(ll);
					oos.flush();

					ll = (List<Object>) ois.readObject();
				} catch (IOException e1) {
					e1.printStackTrace();
				} catch (ClassNotFoundException e1) {
					e1.printStackTrace();
				}
				boolean bool = Boolean.parseBoolean(ll.get(0).toString());
				if (bool) {
					JOptionPane.showMessageDialog(null, "删除成功");
				} else {
					JOptionPane.showMessageDialog(null, "删除失败");
				}
			}
		});
		btnNewButton_5.setBounds(450, 340, 120, 30);
		btnNewButton_5.setFont(new Font("华文楷体", Font.BOLD, 20));
		contentPane.add(btnNewButton_5);

		JLabel lblNewLabel = new JLabel("");
		lblNewLabel.setIcon(new ImageIcon(MerchantMain.class.getResource("/com/xdcs/swing/image/imagebig.png")));
		lblNewLabel.setBounds(0, 0, 584, 413);
		contentPane.add(lblNewLabel);

		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				super.windowClosing(e);
				if (!SocketUtil.socketEmpty()) {
					List list = new ArrayList<>();
					list.add("closeSocket");
					ObjectOutputStream oos = SocketUtil.getObjectOutputStream();
					try {
						oos.writeObject(list);
						oos.flush();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
				System.exit(0);
			}
		});
	}

	public MerchantMain(User user, List<Goods> goods) throws HeadlessException {
		this();
		this.user = user;
		this.goods = goods;
		this.list.setListData(goods.toArray());
		this.textField.setText(user.getUsername());
		this.label.setIcon(new ImageIcon(user.getIconUrl()));
		List<String> name = new ArrayList<>();
		combobox.addItem("---请选择---");
		for (Goods g : goods) {
			if (!name.contains(g.getGoodBrand())) {
				name.add(g.getGoodBrand());
				combobox.addItem(g.getGoodBrand());
			}
		}
	}

}
